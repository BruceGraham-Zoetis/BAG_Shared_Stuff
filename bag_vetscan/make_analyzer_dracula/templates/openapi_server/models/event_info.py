# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class EventInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activation_time=None, severity=None, event_name=None, event_additional_information=None):  # noqa: E501
        """EventInfo - a model defined in OpenAPI

        :param activation_time: The activation_time of this EventInfo.  # noqa: E501
        :type activation_time: str
        :param severity: The severity of this EventInfo.  # noqa: E501
        :type severity: str
        :param event_name: The event_name of this EventInfo.  # noqa: E501
        :type event_name: str
        :param event_additional_information: The event_additional_information of this EventInfo.  # noqa: E501
        :type event_additional_information: str
        """
        self.openapi_types = {
            'activation_time': str,
            'severity': str,
            'event_name': str,
            'event_additional_information': str
        }

        self.attribute_map = {
            'activation_time': 'activation_time',
            'severity': 'severity',
            'event_name': 'event_name',
            'event_additional_information': 'event_additional_information'
        }

        self._activation_time = activation_time
        self._severity = severity
        self._event_name = event_name
        self._event_additional_information = event_additional_information

    @classmethod
    def from_dict(cls, dikt) -> 'EventInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The event_info of this EventInfo.  # noqa: E501
        :rtype: EventInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activation_time(self):
        """Gets the activation_time of this EventInfo.

        The local date and time the event was activated in format MM-DD-YYYY HH:MM:SS  # noqa: E501

        :return: The activation_time of this EventInfo.
        :rtype: str
        """
        return self._activation_time

    @activation_time.setter
    def activation_time(self, activation_time):
        """Sets the activation_time of this EventInfo.

        The local date and time the event was activated in format MM-DD-YYYY HH:MM:SS  # noqa: E501

        :param activation_time: The activation_time of this EventInfo.
        :type activation_time: str
        """

        self._activation_time = activation_time

    @property
    def severity(self):
        """Gets the severity of this EventInfo.

        A string value indicating the severity of the event  # noqa: E501

        :return: The severity of this EventInfo.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this EventInfo.

        A string value indicating the severity of the event  # noqa: E501

        :param severity: The severity of this EventInfo.
        :type severity: str
        """
        allowed_values = ["Notification", "Warning", "Error", "Halt"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def event_name(self):
        """Gets the event_name of this EventInfo.

        The name of the event  # noqa: E501

        :return: The event_name of this EventInfo.
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this EventInfo.

        The name of the event  # noqa: E501

        :param event_name: The event_name of this EventInfo.
        :type event_name: str
        """

        self._event_name = event_name

    @property
    def event_additional_information(self):
        """Gets the event_additional_information of this EventInfo.

        Additional information to describe the event that has occurred.  This can be anything that will help the operator understand in more detail the event  # noqa: E501

        :return: The event_additional_information of this EventInfo.
        :rtype: str
        """
        return self._event_additional_information

    @event_additional_information.setter
    def event_additional_information(self, event_additional_information):
        """Sets the event_additional_information of this EventInfo.

        Additional information to describe the event that has occurred.  This can be anything that will help the operator understand in more detail the event  # noqa: E501

        :param event_additional_information: The event_additional_information of this EventInfo.
        :type event_additional_information: str
        """

        self._event_additional_information = event_additional_information
