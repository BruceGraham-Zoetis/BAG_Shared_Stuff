# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server import util


class InlineResponse400(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, detail: str=None, status: float=None, title: str=None, type: str=None):
        """InlineResponse400 - a model defined in OpenAPI

        :param detail: The detail of this InlineResponse400.
        :param status: The status of this InlineResponse400.
        :param title: The title of this InlineResponse400.
        :param type: The type of this InlineResponse400.
        """
        self.openapi_types = {
            'detail': str,
            'status': float,
            'title': str,
            'type': str
        }

        self.attribute_map = {
            'detail': 'detail',
            'status': 'status',
            'title': 'title',
            'type': 'type'
        }

        self._detail = detail
        self._status = status
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InlineResponse400':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The inline_response_400 of this InlineResponse400.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def detail(self):
        """Gets the detail of this InlineResponse400.

        A description of the problem with the request

        :return: The detail of this InlineResponse400.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this InlineResponse400.

        A description of the problem with the request

        :param detail: The detail of this InlineResponse400.
        :type detail: str
        """
        if detail is None:
            raise ValueError("Invalid value for `detail`, must not be `None`")

        self._detail = detail

    @property
    def status(self):
        """Gets the status of this InlineResponse400.

        The number of the HTTP error code

        :return: The status of this InlineResponse400.
        :rtype: float
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse400.

        The number of the HTTP error code

        :param status: The status of this InlineResponse400.
        :type status: float
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def title(self):
        """Gets the title of this InlineResponse400.

        The title of the error indicated by the status

        :return: The title of this InlineResponse400.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this InlineResponse400.

        The title of the error indicated by the status

        :param title: The title of this InlineResponse400.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def type(self):
        """Gets the type of this InlineResponse400.

        Additional error information if available describing the type of error

        :return: The type of this InlineResponse400.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse400.

        Additional error information if available describing the type of error

        :param type: The type of this InlineResponse400.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
