/*
 * Analyzer and HUB API
 * The definition of the software interface between analyzers and the HUB.  The interface will be implemented as a RESTful interface with all server endpoints hosted on the Analyzer.  The following requirements will be met by all interfaces:  1. All data passed back from server shall be in JSON format. 2. All query parameters and JSON data properties shall be named using snake case and be all lower case. 4. All data types that describe a measurement value shall end with an underscore followed by the unit of that physical value.  i.e. motor_current_ma.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BodyNotificationAck;
import org.openapitools.client.model.BodyPromptsOptionChosen;
import org.openapitools.client.model.BodyPromptsQrScanned;
import org.openapitools.client.model.ResponseBadRequest400;
import org.openapitools.client.model.ResponseServiceUnavailable503;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PromptsChannelApi {
    private ApiClient localVarApiClient;

    public PromptsChannelApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PromptsChannelApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for promptsNotificationAckPost
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hub received message successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call promptsNotificationAckPostCall(BodyNotificationAck body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/prompts/notification_ack";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call promptsNotificationAckPostValidateBeforeCall(BodyNotificationAck body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling promptsNotificationAckPost(Async)");
        }
        

        okhttp3.Call localVarCall = promptsNotificationAckPostCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Hub is informing the analyzer a notification was acknowledged by the operator in response to a websocket message named notification on the prompts channel.
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hub received message successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public void promptsNotificationAckPost(BodyNotificationAck body) throws ApiException {
        promptsNotificationAckPostWithHttpInfo(body);
    }

    /**
     * 
     * Hub is informing the analyzer a notification was acknowledged by the operator in response to a websocket message named notification on the prompts channel.
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hub received message successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> promptsNotificationAckPostWithHttpInfo(BodyNotificationAck body) throws ApiException {
        okhttp3.Call localVarCall = promptsNotificationAckPostValidateBeforeCall(body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Hub is informing the analyzer a notification was acknowledged by the operator in response to a websocket message named notification on the prompts channel.
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hub received message successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call promptsNotificationAckPostAsync(BodyNotificationAck body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = promptsNotificationAckPostValidateBeforeCall(body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for promptsOptionChosenPost
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hub received chosen option successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call promptsOptionChosenPostCall(BodyPromptsOptionChosen body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/prompts/option_chosen";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call promptsOptionChosenPostValidateBeforeCall(BodyPromptsOptionChosen body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling promptsOptionChosenPost(Async)");
        }
        

        okhttp3.Call localVarCall = promptsOptionChosenPostCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Hub is informing the analyzer of an option that was made by the operator in response to a websocket message named choose_option on the prompts channel.
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hub received chosen option successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public void promptsOptionChosenPost(BodyPromptsOptionChosen body) throws ApiException {
        promptsOptionChosenPostWithHttpInfo(body);
    }

    /**
     * 
     * Hub is informing the analyzer of an option that was made by the operator in response to a websocket message named choose_option on the prompts channel.
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hub received chosen option successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> promptsOptionChosenPostWithHttpInfo(BodyPromptsOptionChosen body) throws ApiException {
        okhttp3.Call localVarCall = promptsOptionChosenPostValidateBeforeCall(body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Hub is informing the analyzer of an option that was made by the operator in response to a websocket message named choose_option on the prompts channel.
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hub received chosen option successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call promptsOptionChosenPostAsync(BodyPromptsOptionChosen body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = promptsOptionChosenPostValidateBeforeCall(body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for promptsQrScannedPost
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hub received message successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call promptsQrScannedPostCall(BodyPromptsQrScanned body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/prompts/qr_scanned";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call promptsQrScannedPostValidateBeforeCall(BodyPromptsQrScanned body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling promptsQrScannedPost(Async)");
        }
        

        okhttp3.Call localVarCall = promptsQrScannedPostCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Hub is informing the analyzer of a QR scan attempt in response to a websocket message named scan_qr on the prompts channel.
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hub received message successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public void promptsQrScannedPost(BodyPromptsQrScanned body) throws ApiException {
        promptsQrScannedPostWithHttpInfo(body);
    }

    /**
     * 
     * Hub is informing the analyzer of a QR scan attempt in response to a websocket message named scan_qr on the prompts channel.
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hub received message successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> promptsQrScannedPostWithHttpInfo(BodyPromptsQrScanned body) throws ApiException {
        okhttp3.Call localVarCall = promptsQrScannedPostValidateBeforeCall(body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Hub is informing the analyzer of a QR scan attempt in response to a websocket message named scan_qr on the prompts channel.
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hub received message successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call promptsQrScannedPostAsync(BodyPromptsQrScanned body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = promptsQrScannedPostValidateBeforeCall(body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
