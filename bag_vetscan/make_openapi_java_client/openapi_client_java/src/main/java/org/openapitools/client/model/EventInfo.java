/*
 * Analyzer and HUB API
 * The definition of the software interface between analyzers and the HUB.  The interface will be implemented as a RESTful interface with all server endpoints hosted on the Analyzer.  The following requirements will be met by all interfaces:  1. All data passed back from server shall be in JSON format. 2. All query parameters and JSON data properties shall be named using snake case and be all lower case. 4. All data types that describe a measurement value shall end with an underscore followed by the unit of that physical value.  i.e. motor_current_ma.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * This object will contain information about an event that occurred
 */
@ApiModel(description = "This object will contain information about an event that occurred")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-10-07T10:16:52.817798-04:00[America/Nassau]")
public class EventInfo {
  public static final String SERIALIZED_NAME_ACTIVATION_TIME = "activation_time";
  @SerializedName(SERIALIZED_NAME_ACTIVATION_TIME)
  private String activationTime;

  /**
   * A string value indicating the severity of the event
   */
  @JsonAdapter(SeverityEnum.Adapter.class)
  public enum SeverityEnum {
    NOTIFICATION("Notification"),
    
    WARNING("Warning"),
    
    ERROR("Error"),
    
    HALT("Halt");

    private String value;

    SeverityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SeverityEnum fromValue(String value) {
      for (SeverityEnum b : SeverityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SeverityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SeverityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SeverityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SeverityEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private SeverityEnum severity;

  public static final String SERIALIZED_NAME_EVENT_NAME = "event_name";
  @SerializedName(SERIALIZED_NAME_EVENT_NAME)
  private String eventName;

  public static final String SERIALIZED_NAME_EVENT_ADDITIONAL_INFORMATION = "event_additional_information";
  @SerializedName(SERIALIZED_NAME_EVENT_ADDITIONAL_INFORMATION)
  private String eventAdditionalInformation;


  public EventInfo activationTime(String activationTime) {
    
    this.activationTime = activationTime;
    return this;
  }

   /**
   * The local date and time the event was activated in format MM-DD-YYYY HH:MM:SS
   * @return activationTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "05-05-2021 22:07:04", value = "The local date and time the event was activated in format MM-DD-YYYY HH:MM:SS")

  public String getActivationTime() {
    return activationTime;
  }


  public void setActivationTime(String activationTime) {
    this.activationTime = activationTime;
  }


  public EventInfo severity(SeverityEnum severity) {
    
    this.severity = severity;
    return this;
  }

   /**
   * A string value indicating the severity of the event
   * @return severity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A string value indicating the severity of the event")

  public SeverityEnum getSeverity() {
    return severity;
  }


  public void setSeverity(SeverityEnum severity) {
    this.severity = severity;
  }


  public EventInfo eventName(String eventName) {
    
    this.eventName = eventName;
    return this;
  }

   /**
   * The name of the event
   * @return eventName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the event")

  public String getEventName() {
    return eventName;
  }


  public void setEventName(String eventName) {
    this.eventName = eventName;
  }


  public EventInfo eventAdditionalInformation(String eventAdditionalInformation) {
    
    this.eventAdditionalInformation = eventAdditionalInformation;
    return this;
  }

   /**
   * Additional information to describe the event that has occurred.  This can be anything that will help the operator understand in more detail the event
   * @return eventAdditionalInformation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Additional information to describe the event that has occurred.  This can be anything that will help the operator understand in more detail the event")

  public String getEventAdditionalInformation() {
    return eventAdditionalInformation;
  }


  public void setEventAdditionalInformation(String eventAdditionalInformation) {
    this.eventAdditionalInformation = eventAdditionalInformation;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventInfo eventInfo = (EventInfo) o;
    return Objects.equals(this.activationTime, eventInfo.activationTime) &&
        Objects.equals(this.severity, eventInfo.severity) &&
        Objects.equals(this.eventName, eventInfo.eventName) &&
        Objects.equals(this.eventAdditionalInformation, eventInfo.eventAdditionalInformation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activationTime, severity, eventName, eventAdditionalInformation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventInfo {\n");
    sb.append("    activationTime: ").append(toIndentedString(activationTime)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    eventName: ").append(toIndentedString(eventName)).append("\n");
    sb.append("    eventAdditionalInformation: ").append(toIndentedString(eventAdditionalInformation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

