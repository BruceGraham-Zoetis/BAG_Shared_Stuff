/*
 * Analyzer and HUB API
 * The definition of the software interface between analyzers and the HUB.  The interface will be implemented as a RESTful interface with all server endpoints hosted on the Analyzer.  The following requirements will be met by all interfaces:  1. All data passed back from server shall be in JSON format. 2. All query parameters and JSON data properties shall be named using snake case and be all lower case. 4. All data types that describe a measurement value shall end with an underscore followed by the unit of that physical value.  i.e. motor_current_ma.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BodyFileJson;
import org.openapitools.client.model.BodyScriptJson;
import org.threeten.bp.OffsetDateTime;
import org.openapitools.client.model.ResponseBadRequest400;
import org.openapitools.client.model.ResponseMeasurementResult;
import org.openapitools.client.model.ResponseMeasurementResults;
import org.openapitools.client.model.ResponseServiceUnavailable503;
import org.openapitools.client.model.ResponseSupportedConsumables;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MeasurementChannelApi {
    private ApiClient localVarApiClient;

    public MeasurementChannelApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MeasurementChannelApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for measurementCancelPost
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer successfully began cancelling the measurement </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call measurementCancelPostCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/measurement/cancel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call measurementCancelPostValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = measurementCancelPostCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * The HUB is requesting the analyzer cancel the measurement that is currently being performed
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer successfully began cancelling the measurement </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public void measurementCancelPost() throws ApiException {
        measurementCancelPostWithHttpInfo();
    }

    /**
     * 
     * The HUB is requesting the analyzer cancel the measurement that is currently being performed
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer successfully began cancelling the measurement </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> measurementCancelPostWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = measurementCancelPostValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * The HUB is requesting the analyzer cancel the measurement that is currently being performed
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer successfully began cancelling the measurement </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call measurementCancelPostAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = measurementCancelPostValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for measurementConsumableConsumableUuidPost
     * @param consumableUuid The UUID of the consumable (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer successfully began measurement </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call measurementConsumableConsumableUuidPostCall(UUID consumableUuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/measurement/consumable/{consumable_uuid}"
            .replaceAll("\\{" + "consumable_uuid" + "\\}", localVarApiClient.escapeString(consumableUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call measurementConsumableConsumableUuidPostValidateBeforeCall(UUID consumableUuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'consumableUuid' is set
        if (consumableUuid == null) {
            throw new ApiException("Missing the required parameter 'consumableUuid' when calling measurementConsumableConsumableUuidPost(Async)");
        }
        

        okhttp3.Call localVarCall = measurementConsumableConsumableUuidPostCall(consumableUuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Start an analyzer measurement with a specific consumable
     * @param consumableUuid The UUID of the consumable (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer successfully began measurement </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public void measurementConsumableConsumableUuidPost(UUID consumableUuid) throws ApiException {
        measurementConsumableConsumableUuidPostWithHttpInfo(consumableUuid);
    }

    /**
     * 
     * Start an analyzer measurement with a specific consumable
     * @param consumableUuid The UUID of the consumable (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer successfully began measurement </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> measurementConsumableConsumableUuidPostWithHttpInfo(UUID consumableUuid) throws ApiException {
        okhttp3.Call localVarCall = measurementConsumableConsumableUuidPostValidateBeforeCall(consumableUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Start an analyzer measurement with a specific consumable
     * @param consumableUuid The UUID of the consumable (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer successfully began measurement </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call measurementConsumableConsumableUuidPostAsync(UUID consumableUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = measurementConsumableConsumableUuidPostValidateBeforeCall(consumableUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for measurementFilePost
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer successfully began measurement </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call measurementFilePostCall(BodyFileJson body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/measurement/file";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call measurementFilePostValidateBeforeCall(BodyFileJson body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling measurementFilePost(Async)");
        }
        

        okhttp3.Call localVarCall = measurementFilePostCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Start an analyzer measurement script as described in a file stored on the analyzer.  This is intended for R&amp;D use only and should not be used during normal operation
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer successfully began measurement </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public void measurementFilePost(BodyFileJson body) throws ApiException {
        measurementFilePostWithHttpInfo(body);
    }

    /**
     * 
     * Start an analyzer measurement script as described in a file stored on the analyzer.  This is intended for R&amp;D use only and should not be used during normal operation
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer successfully began measurement </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> measurementFilePostWithHttpInfo(BodyFileJson body) throws ApiException {
        okhttp3.Call localVarCall = measurementFilePostValidateBeforeCall(body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Start an analyzer measurement script as described in a file stored on the analyzer.  This is intended for R&amp;D use only and should not be used during normal operation
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer successfully began measurement </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call measurementFilePostAsync(BodyFileJson body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = measurementFilePostValidateBeforeCall(body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for measurementResultsGet
     * @param startDatetime The earliest result. If missing, the analyzer must return the results from as early as possible (optional)
     * @param endDatetime The latest time for a result. If missing, the analyzer must return all results from &#39;from&#39; untill present time. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer is responding with the results of all measurements taken between the times in the request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call measurementResultsGetCall(OffsetDateTime startDatetime, OffsetDateTime endDatetime, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/measurement/results";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDatetime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_datetime", startDatetime));
        }

        if (endDatetime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_datetime", endDatetime));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call measurementResultsGetValidateBeforeCall(OffsetDateTime startDatetime, OffsetDateTime endDatetime, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = measurementResultsGetCall(startDatetime, endDatetime, _callback);
        return localVarCall;

    }

    /**
     * 
     * The client is requesting the analyzer to send past results between two times
     * @param startDatetime The earliest result. If missing, the analyzer must return the results from as early as possible (optional)
     * @param endDatetime The latest time for a result. If missing, the analyzer must return all results from &#39;from&#39; untill present time. (optional)
     * @return ResponseMeasurementResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer is responding with the results of all measurements taken between the times in the request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public ResponseMeasurementResults measurementResultsGet(OffsetDateTime startDatetime, OffsetDateTime endDatetime) throws ApiException {
        ApiResponse<ResponseMeasurementResults> localVarResp = measurementResultsGetWithHttpInfo(startDatetime, endDatetime);
        return localVarResp.getData();
    }

    /**
     * 
     * The client is requesting the analyzer to send past results between two times
     * @param startDatetime The earliest result. If missing, the analyzer must return the results from as early as possible (optional)
     * @param endDatetime The latest time for a result. If missing, the analyzer must return all results from &#39;from&#39; untill present time. (optional)
     * @return ApiResponse&lt;ResponseMeasurementResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer is responding with the results of all measurements taken between the times in the request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseMeasurementResults> measurementResultsGetWithHttpInfo(OffsetDateTime startDatetime, OffsetDateTime endDatetime) throws ApiException {
        okhttp3.Call localVarCall = measurementResultsGetValidateBeforeCall(startDatetime, endDatetime, null);
        Type localVarReturnType = new TypeToken<ResponseMeasurementResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The client is requesting the analyzer to send past results between two times
     * @param startDatetime The earliest result. If missing, the analyzer must return the results from as early as possible (optional)
     * @param endDatetime The latest time for a result. If missing, the analyzer must return all results from &#39;from&#39; untill present time. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer is responding with the results of all measurements taken between the times in the request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call measurementResultsGetAsync(OffsetDateTime startDatetime, OffsetDateTime endDatetime, final ApiCallback<ResponseMeasurementResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = measurementResultsGetValidateBeforeCall(startDatetime, endDatetime, _callback);
        Type localVarReturnType = new TypeToken<ResponseMeasurementResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for measurementResultsLatestGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The analyzer is sending the client the results of the most recent measurement performed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call measurementResultsLatestGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/measurement/results/latest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call measurementResultsLatestGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = measurementResultsLatestGetCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * The client requests that the analyzer return the result of the most recent measurement performed
     * @return ResponseMeasurementResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The analyzer is sending the client the results of the most recent measurement performed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public ResponseMeasurementResult measurementResultsLatestGet() throws ApiException {
        ApiResponse<ResponseMeasurementResult> localVarResp = measurementResultsLatestGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * The client requests that the analyzer return the result of the most recent measurement performed
     * @return ApiResponse&lt;ResponseMeasurementResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The analyzer is sending the client the results of the most recent measurement performed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseMeasurementResult> measurementResultsLatestGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = measurementResultsLatestGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ResponseMeasurementResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The client requests that the analyzer return the result of the most recent measurement performed
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The analyzer is sending the client the results of the most recent measurement performed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call measurementResultsLatestGetAsync(final ApiCallback<ResponseMeasurementResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = measurementResultsLatestGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ResponseMeasurementResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for measurementScriptPost
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer successfully began measurement </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call measurementScriptPostCall(BodyScriptJson body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/measurement/script";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call measurementScriptPostValidateBeforeCall(BodyScriptJson body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling measurementScriptPost(Async)");
        }
        

        okhttp3.Call localVarCall = measurementScriptPostCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Start an analyzer measurement script sent as a string.  This is intended for R&amp;D use only and should not be used during normal operation
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer successfully began measurement </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public void measurementScriptPost(BodyScriptJson body) throws ApiException {
        measurementScriptPostWithHttpInfo(body);
    }

    /**
     * 
     * Start an analyzer measurement script sent as a string.  This is intended for R&amp;D use only and should not be used during normal operation
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer successfully began measurement </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> measurementScriptPostWithHttpInfo(BodyScriptJson body) throws ApiException {
        okhttp3.Call localVarCall = measurementScriptPostValidateBeforeCall(body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Start an analyzer measurement script sent as a string.  This is intended for R&amp;D use only and should not be used during normal operation
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer successfully began measurement </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call measurementScriptPostAsync(BodyScriptJson body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = measurementScriptPostValidateBeforeCall(body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for measurementSupportedConsumablesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer is responding to the client with a detailed list of all supported consumables. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call measurementSupportedConsumablesGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/measurement/supported_consumables";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call measurementSupportedConsumablesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = measurementSupportedConsumablesGetCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Return a list of all consumable types the analyzer supports. Each consumable returned will include a universally unique identifier, which will be used by the IC when starting a measurement. Any information required to run a consumable will be described in the response using the JSON Schema format (https://json-schema.org/).
     * @return ResponseSupportedConsumables
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer is responding to the client with a detailed list of all supported consumables. </td><td>  -  </td></tr>
     </table>
     */
    public ResponseSupportedConsumables measurementSupportedConsumablesGet() throws ApiException {
        ApiResponse<ResponseSupportedConsumables> localVarResp = measurementSupportedConsumablesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Return a list of all consumable types the analyzer supports. Each consumable returned will include a universally unique identifier, which will be used by the IC when starting a measurement. Any information required to run a consumable will be described in the response using the JSON Schema format (https://json-schema.org/).
     * @return ApiResponse&lt;ResponseSupportedConsumables&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer is responding to the client with a detailed list of all supported consumables. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseSupportedConsumables> measurementSupportedConsumablesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = measurementSupportedConsumablesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ResponseSupportedConsumables>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return a list of all consumable types the analyzer supports. Each consumable returned will include a universally unique identifier, which will be used by the IC when starting a measurement. Any information required to run a consumable will be described in the response using the JSON Schema format (https://json-schema.org/).
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer is responding to the client with a detailed list of all supported consumables. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call measurementSupportedConsumablesGetAsync(final ApiCallback<ResponseSupportedConsumables> _callback) throws ApiException {

        okhttp3.Call localVarCall = measurementSupportedConsumablesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ResponseSupportedConsumables>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
