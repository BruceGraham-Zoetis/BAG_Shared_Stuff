/*
 * Analyzer and HUB API
 * The definition of the software interface between analyzers and the HUB.  The interface will be implemented as a RESTful interface with all server endpoints hosted on the Analyzer.  The following requirements will be met by all interfaces:  1. All data passed back from server shall be in JSON format. 2. All query parameters and JSON data properties shall be named using snake case and be all lower case. 4. All data types that describe a measurement value shall end with an underscore followed by the unit of that physical value.  i.e. motor_current_ma.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BodyFileJson;
import org.openapitools.client.model.BodyScriptJson;
import org.threeten.bp.OffsetDateTime;
import org.openapitools.client.model.ResponseBadRequest400;
import org.openapitools.client.model.ResponseMeasurementResult;
import org.openapitools.client.model.ResponseMeasurementResults;
import org.openapitools.client.model.ResponseServiceUnavailable503;
import org.openapitools.client.model.ResponseSupportedConsumables;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MeasurementChannelApi
 */
@Ignore
public class MeasurementChannelApiTest {

    private final MeasurementChannelApi api = new MeasurementChannelApi();

    
    /**
     * 
     *
     * The HUB is requesting the analyzer cancel the measurement that is currently being performed
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void measurementCancelPostTest() throws ApiException {
        api.measurementCancelPost();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Start an analyzer measurement with a specific consumable
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void measurementConsumableConsumableUuidPostTest() throws ApiException {
        UUID consumableUuid = null;
        api.measurementConsumableConsumableUuidPost(consumableUuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Start an analyzer measurement script as described in a file stored on the analyzer.  This is intended for R&amp;D use only and should not be used during normal operation
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void measurementFilePostTest() throws ApiException {
        BodyFileJson body = null;
        api.measurementFilePost(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * The client is requesting the analyzer to send past results between two times
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void measurementResultsGetTest() throws ApiException {
        OffsetDateTime startDatetime = null;
        OffsetDateTime endDatetime = null;
        ResponseMeasurementResults response = api.measurementResultsGet(startDatetime, endDatetime);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * The client requests that the analyzer return the result of the most recent measurement performed
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void measurementResultsLatestGetTest() throws ApiException {
        ResponseMeasurementResult response = api.measurementResultsLatestGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Start an analyzer measurement script sent as a string.  This is intended for R&amp;D use only and should not be used during normal operation
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void measurementScriptPostTest() throws ApiException {
        BodyScriptJson body = null;
        api.measurementScriptPost(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Return a list of all consumable types the analyzer supports. Each consumable returned will include a universally unique identifier, which will be used by the IC when starting a measurement. Any information required to run a consumable will be described in the response using the JSON Schema format (https://json-schema.org/).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void measurementSupportedConsumablesGetTest() throws ApiException {
        ResponseSupportedConsumables response = api.measurementSupportedConsumablesGet();

        // TODO: test validations
    }
    
}
