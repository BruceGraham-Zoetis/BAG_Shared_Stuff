/*
 * Analyzer and HUB API
 * The definition of the software interface between analyzers and the HUB.  The interface will be implemented as a RESTful interface with all server endpoints hosted on the Analyzer.  The following requirements will be met by all interfaces:  1. All data passed back from server shall be in JSON format. 2. All query parameters and JSON data properties shall be named using snake case and be all lower case. 4. All data types that describe a measurement value shall end with an underscore followed by the unit of that physical value.  i.e. motor_current_ma.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ResponseServiceUnavailable503;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ControlChannelApi
 */
@Ignore
public class ControlChannelApiTest {

    private final ControlChannelApi api = new ControlChannelApi();

    
    /**
     * 
     *
     * Cause an analyzer to blink its light ring.  The purpose of this is to identify an analyzer. If you have multiple analyzers of the same kind it is nice to have a way to get a visual que which is which instead of having to read the serial number of each analyzer to identify it.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void controlLightBlinkPutTest() throws ApiException {
        api.controlLightBlinkPut();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Go from a state of powered to no power. This behavior of this action will depend on what a particular analyzer supports. If it doesn&#39;t support power off, go to &#39;deep sleep&#39; mode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void controlPowerOffPutTest() throws ApiException {
        api.controlPowerOffPut();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Request sent from a client to reboot the analyzer (power off and power back on), leaving all settings and data intact
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void controlPowerRebootPutTest() throws ApiException {
        api.controlPowerRebootPut();

        // TODO: test validations
    }
    
}
