/*
 * Analyzer and HUB API
 * The definition of the software interface between analyzers and the HUB.  The interface will be implemented as a RESTful interface with all server endpoints hosted on the Analyzer.  The following requirements will be met by all interfaces:  1. All data passed back from server shall be in JSON format. 2. All query parameters and JSON data properties shall be named using snake case and be all lower case. 4. All data types that describe a measurement value shall end with an underscore followed by the unit of that physical value.  i.e. motor_current_ma.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.InlineResponse400;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ControlChannelApi {
    private ApiClient localVarApiClient;

    public ControlChannelApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ControlChannelApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for controlLightBlinkPut
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer was successful blinking the light ring </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call controlLightBlinkPutCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/control/light/blink";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call controlLightBlinkPutValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = controlLightBlinkPutCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Cause an analyzer to blink its light ring.  The purpose of this is to identify an analyzer. If you have multiple analyzers of the same kind it is nice to have a way to get a visual que which is which instead of having to read the serial number of each analyzer to identify it.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer was successful blinking the light ring </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public void controlLightBlinkPut() throws ApiException {
        controlLightBlinkPutWithHttpInfo();
    }

    /**
     * 
     * Cause an analyzer to blink its light ring.  The purpose of this is to identify an analyzer. If you have multiple analyzers of the same kind it is nice to have a way to get a visual que which is which instead of having to read the serial number of each analyzer to identify it.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer was successful blinking the light ring </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> controlLightBlinkPutWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = controlLightBlinkPutValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Cause an analyzer to blink its light ring.  The purpose of this is to identify an analyzer. If you have multiple analyzers of the same kind it is nice to have a way to get a visual que which is which instead of having to read the serial number of each analyzer to identify it.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer was successful blinking the light ring </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call controlLightBlinkPutAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = controlLightBlinkPutValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for controlLightOffPut
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer was successful the light ring is off as requested by the HUB </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This response is sent to a request to a server endpoint that is not defined </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> This response is sent to any request sent to a valid location but with an method that is not supported </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> This response is sent to any request whose subsequent server response violates the predefined response schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call controlLightOffPutCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/control/light/off";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call controlLightOffPutValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = controlLightOffPutCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Cause an analyzer to turn off its light ring.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer was successful the light ring is off as requested by the HUB </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This response is sent to a request to a server endpoint that is not defined </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> This response is sent to any request sent to a valid location but with an method that is not supported </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> This response is sent to any request whose subsequent server response violates the predefined response schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public void controlLightOffPut() throws ApiException {
        controlLightOffPutWithHttpInfo();
    }

    /**
     * 
     * Cause an analyzer to turn off its light ring.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer was successful the light ring is off as requested by the HUB </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This response is sent to a request to a server endpoint that is not defined </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> This response is sent to any request sent to a valid location but with an method that is not supported </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> This response is sent to any request whose subsequent server response violates the predefined response schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> controlLightOffPutWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = controlLightOffPutValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Cause an analyzer to turn off its light ring.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer was successful the light ring is off as requested by the HUB </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This response is sent to a request to a server endpoint that is not defined </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> This response is sent to any request sent to a valid location but with an method that is not supported </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> This response is sent to any request whose subsequent server response violates the predefined response schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call controlLightOffPutAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = controlLightOffPutValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for controlPowerOffPut
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer successfully began to power off or go to sleep </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call controlPowerOffPutCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/control/power/off";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call controlPowerOffPutValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = controlPowerOffPutCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Go from a state of powered to no power. This behavior of this action will depend on what a particular analyzer supports. If it doesn&#39;t support power off, go to &#39;deep sleep&#39; mode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer successfully began to power off or go to sleep </td><td>  -  </td></tr>
     </table>
     */
    public void controlPowerOffPut() throws ApiException {
        controlPowerOffPutWithHttpInfo();
    }

    /**
     * 
     * Go from a state of powered to no power. This behavior of this action will depend on what a particular analyzer supports. If it doesn&#39;t support power off, go to &#39;deep sleep&#39; mode
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer successfully began to power off or go to sleep </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> controlPowerOffPutWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = controlPowerOffPutValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Go from a state of powered to no power. This behavior of this action will depend on what a particular analyzer supports. If it doesn&#39;t support power off, go to &#39;deep sleep&#39; mode
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer successfully began to power off or go to sleep </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call controlPowerOffPutAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = controlPowerOffPutValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for controlPowerRebootPut
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer successfully initiated a reboot </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call controlPowerRebootPutCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/control/power/reboot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call controlPowerRebootPutValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = controlPowerRebootPutCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Request sent from a client to reboot the analyzer (power off and power back on), leaving all settings and data intact
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer successfully initiated a reboot </td><td>  -  </td></tr>
     </table>
     */
    public void controlPowerRebootPut() throws ApiException {
        controlPowerRebootPutWithHttpInfo();
    }

    /**
     * 
     * Request sent from a client to reboot the analyzer (power off and power back on), leaving all settings and data intact
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer successfully initiated a reboot </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> controlPowerRebootPutWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = controlPowerRebootPutValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Request sent from a client to reboot the analyzer (power off and power back on), leaving all settings and data intact
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer successfully initiated a reboot </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call controlPowerRebootPutAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = controlPowerRebootPutValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
