/*
 * Analyzer and HUB API
 * The definition of the software interface between analyzers and the HUB.  The interface will be implemented as a RESTful interface with all server endpoints hosted on the Analyzer.  The following requirements will be met by all interfaces:  1. All data passed back from server shall be in JSON format. 2. All query parameters and JSON data properties shall be named using snake case and be all lower case. 4. All data types that describe a measurement value shall end with an underscore followed by the unit of that physical value.  i.e. motor_current_ma.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The status of the measurement
 */
@JsonAdapter(MeasurementStatus.Adapter.class)
public enum MeasurementStatus {
  
  INITIALIZING("Initializing"),
  
  RUNNING("Running"),
  
  ABORTED("Aborted"),
  
  STOPPING("Stopping"),
  
  COMPLETE("Complete");

  private String value;

  MeasurementStatus(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static MeasurementStatus fromValue(String value) {
    for (MeasurementStatus b : MeasurementStatus.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<MeasurementStatus> {
    @Override
    public void write(final JsonWriter jsonWriter, final MeasurementStatus enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public MeasurementStatus read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return MeasurementStatus.fromValue(value);
    }
  }
}

