/*
 * Analyzer and HUB API
 * The definition of the software interface between analyzers and the HUB.  The interface will be implemented as a RESTful interface with all server endpoints hosted on the Analyzer.  The following requirements will be met by all interfaces:  1. All data passed back from server shall be in JSON format. 2. All query parameters and JSON data properties shall be named using snake case and be all lower case. 4. All data types that describe a measurement value shall end with an underscore followed by the unit of that physical value.  i.e. motor_current_ma.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.InlineObject;
import org.openapitools.client.model.InlineObject1;
import org.openapitools.client.model.InlineResponse200;
import org.openapitools.client.model.InlineResponse2001;
import org.openapitools.client.model.InlineResponse400;
import org.openapitools.client.model.MeasurementResult;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MeasurementChannelApi {
    private ApiClient localVarApiClient;

    public MeasurementChannelApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MeasurementChannelApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for channelMeasurementGetMeasurementStatus
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This response is sent to notify the HUB of the status of a measurement that was requested to start, cancel, or whose status is being queried </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This response is sent to a request to a server endpoint that is not defined </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> This response is sent to any request whose subsequent server response violates the predefined response schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call channelMeasurementGetMeasurementStatusCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/measurement/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call channelMeasurementGetMeasurementStatusValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = channelMeasurementGetMeasurementStatusCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * The HUB is requesting the analyzer return the status of the current measurement being performed
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This response is sent to notify the HUB of the status of a measurement that was requested to start, cancel, or whose status is being queried </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This response is sent to a request to a server endpoint that is not defined </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> This response is sent to any request whose subsequent server response violates the predefined response schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200 channelMeasurementGetMeasurementStatus() throws ApiException {
        ApiResponse<InlineResponse200> localVarResp = channelMeasurementGetMeasurementStatusWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * The HUB is requesting the analyzer return the status of the current measurement being performed
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This response is sent to notify the HUB of the status of a measurement that was requested to start, cancel, or whose status is being queried </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This response is sent to a request to a server endpoint that is not defined </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> This response is sent to any request whose subsequent server response violates the predefined response schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200> channelMeasurementGetMeasurementStatusWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = channelMeasurementGetMeasurementStatusValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The HUB is requesting the analyzer return the status of the current measurement being performed
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This response is sent to notify the HUB of the status of a measurement that was requested to start, cancel, or whose status is being queried </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This response is sent to a request to a server endpoint that is not defined </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> This response is sent to any request whose subsequent server response violates the predefined response schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call channelMeasurementGetMeasurementStatusAsync(final ApiCallback<InlineResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = channelMeasurementGetMeasurementStatusValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for measurementCancelDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This response is sent to notify the HUB of the status of a measurement that was requested to start, cancel, or whose status is being queried </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This response is sent to a request to a server endpoint that is not defined </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> This response is sent to any request sent to a valid location but with an method that is not supported </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> This response is sent to any request whose subsequent server response violates the predefined response schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call measurementCancelDeleteCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/measurement/cancel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call measurementCancelDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = measurementCancelDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * The HUB is requesting the analyzer cancel the measurement that is currently being performed
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This response is sent to notify the HUB of the status of a measurement that was requested to start, cancel, or whose status is being queried </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This response is sent to a request to a server endpoint that is not defined </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> This response is sent to any request sent to a valid location but with an method that is not supported </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> This response is sent to any request whose subsequent server response violates the predefined response schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200 measurementCancelDelete() throws ApiException {
        ApiResponse<InlineResponse200> localVarResp = measurementCancelDeleteWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * The HUB is requesting the analyzer cancel the measurement that is currently being performed
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This response is sent to notify the HUB of the status of a measurement that was requested to start, cancel, or whose status is being queried </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This response is sent to a request to a server endpoint that is not defined </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> This response is sent to any request sent to a valid location but with an method that is not supported </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> This response is sent to any request whose subsequent server response violates the predefined response schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200> measurementCancelDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = measurementCancelDeleteValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The HUB is requesting the analyzer cancel the measurement that is currently being performed
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This response is sent to notify the HUB of the status of a measurement that was requested to start, cancel, or whose status is being queried </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This response is sent to a request to a server endpoint that is not defined </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> This response is sent to any request sent to a valid location but with an method that is not supported </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> This response is sent to any request whose subsequent server response violates the predefined response schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call measurementCancelDeleteAsync(final ApiCallback<InlineResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = measurementCancelDeleteValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for measurementConsumableConsumableUuidPost
     * @param consumableUuid The UUID of the consumable (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This response is sent to notify the HUB of the status of a measurement that was requested to start, cancel, or whose status is being queried </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This response is sent to a request to a server endpoint that is not defined </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> This response is sent to any request sent to a valid location but with an method that is not supported </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> This response is sent to any request whose subsequent server response violates the predefined response schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call measurementConsumableConsumableUuidPostCall(UUID consumableUuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/measurement/consumable/{consumable_uuid}"
            .replaceAll("\\{" + "consumable_uuid" + "\\}", localVarApiClient.escapeString(consumableUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call measurementConsumableConsumableUuidPostValidateBeforeCall(UUID consumableUuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'consumableUuid' is set
        if (consumableUuid == null) {
            throw new ApiException("Missing the required parameter 'consumableUuid' when calling measurementConsumableConsumableUuidPost(Async)");
        }
        

        okhttp3.Call localVarCall = measurementConsumableConsumableUuidPostCall(consumableUuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Start an analyzer measurement with a specific consumable
     * @param consumableUuid The UUID of the consumable (required)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This response is sent to notify the HUB of the status of a measurement that was requested to start, cancel, or whose status is being queried </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This response is sent to a request to a server endpoint that is not defined </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> This response is sent to any request sent to a valid location but with an method that is not supported </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> This response is sent to any request whose subsequent server response violates the predefined response schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200 measurementConsumableConsumableUuidPost(UUID consumableUuid) throws ApiException {
        ApiResponse<InlineResponse200> localVarResp = measurementConsumableConsumableUuidPostWithHttpInfo(consumableUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Start an analyzer measurement with a specific consumable
     * @param consumableUuid The UUID of the consumable (required)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This response is sent to notify the HUB of the status of a measurement that was requested to start, cancel, or whose status is being queried </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This response is sent to a request to a server endpoint that is not defined </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> This response is sent to any request sent to a valid location but with an method that is not supported </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> This response is sent to any request whose subsequent server response violates the predefined response schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200> measurementConsumableConsumableUuidPostWithHttpInfo(UUID consumableUuid) throws ApiException {
        okhttp3.Call localVarCall = measurementConsumableConsumableUuidPostValidateBeforeCall(consumableUuid, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Start an analyzer measurement with a specific consumable
     * @param consumableUuid The UUID of the consumable (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This response is sent to notify the HUB of the status of a measurement that was requested to start, cancel, or whose status is being queried </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This response is sent to a request to a server endpoint that is not defined </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> This response is sent to any request sent to a valid location but with an method that is not supported </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> This response is sent to any request whose subsequent server response violates the predefined response schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call measurementConsumableConsumableUuidPostAsync(UUID consumableUuid, final ApiCallback<InlineResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = measurementConsumableConsumableUuidPostValidateBeforeCall(consumableUuid, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for measurementFilePost
     * @param inlineObject1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This response is sent to notify the HUB of the status of a measurement that was requested to start, cancel, or whose status is being queried </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This response is sent to a request to a server endpoint that is not defined </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> This response is sent to any request sent to a valid location but with an method that is not supported </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> This response is sent to any request whose subsequent server response violates the predefined response schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call measurementFilePostCall(InlineObject1 inlineObject1, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject1;

        // create path and map variables
        String localVarPath = "/measurement/file";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call measurementFilePostValidateBeforeCall(InlineObject1 inlineObject1, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'inlineObject1' is set
        if (inlineObject1 == null) {
            throw new ApiException("Missing the required parameter 'inlineObject1' when calling measurementFilePost(Async)");
        }
        

        okhttp3.Call localVarCall = measurementFilePostCall(inlineObject1, _callback);
        return localVarCall;

    }

    /**
     * 
     * Start an analyzer measurement script as described in a file stored on the analyzer.  This is intended for R&amp;D use only and should not be used during normal operation
     * @param inlineObject1  (required)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This response is sent to notify the HUB of the status of a measurement that was requested to start, cancel, or whose status is being queried </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This response is sent to a request to a server endpoint that is not defined </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> This response is sent to any request sent to a valid location but with an method that is not supported </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> This response is sent to any request whose subsequent server response violates the predefined response schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200 measurementFilePost(InlineObject1 inlineObject1) throws ApiException {
        ApiResponse<InlineResponse200> localVarResp = measurementFilePostWithHttpInfo(inlineObject1);
        return localVarResp.getData();
    }

    /**
     * 
     * Start an analyzer measurement script as described in a file stored on the analyzer.  This is intended for R&amp;D use only and should not be used during normal operation
     * @param inlineObject1  (required)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This response is sent to notify the HUB of the status of a measurement that was requested to start, cancel, or whose status is being queried </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This response is sent to a request to a server endpoint that is not defined </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> This response is sent to any request sent to a valid location but with an method that is not supported </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> This response is sent to any request whose subsequent server response violates the predefined response schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200> measurementFilePostWithHttpInfo(InlineObject1 inlineObject1) throws ApiException {
        okhttp3.Call localVarCall = measurementFilePostValidateBeforeCall(inlineObject1, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Start an analyzer measurement script as described in a file stored on the analyzer.  This is intended for R&amp;D use only and should not be used during normal operation
     * @param inlineObject1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This response is sent to notify the HUB of the status of a measurement that was requested to start, cancel, or whose status is being queried </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This response is sent to a request to a server endpoint that is not defined </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> This response is sent to any request sent to a valid location but with an method that is not supported </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> This response is sent to any request whose subsequent server response violates the predefined response schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call measurementFilePostAsync(InlineObject1 inlineObject1, final ApiCallback<InlineResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = measurementFilePostValidateBeforeCall(inlineObject1, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for measurementPastResultsGet
     * @param startTime The time to start looking for results to return (required)
     * @param startDate The date to start looking for results to return (required)
     * @param endTime The time to stop looking for results to return (required)
     * @param endDate The date to stop looking for results to return (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer is responding with the results of all measurements taken between the times in the request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This response is sent to a request to a server endpoint that is not defined </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> This response is sent to any request sent to a valid location but with an method that is not supported </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> This response is sent to any request whose subsequent server response violates the predefined response schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call measurementPastResultsGetCall(String startTime, String startDate, String endTime, String endDate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/measurement/past_results";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_time", startTime));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_time", endTime));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call measurementPastResultsGetValidateBeforeCall(String startTime, String startDate, String endTime, String endDate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling measurementPastResultsGet(Async)");
        }
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling measurementPastResultsGet(Async)");
        }
        
        // verify the required parameter 'endTime' is set
        if (endTime == null) {
            throw new ApiException("Missing the required parameter 'endTime' when calling measurementPastResultsGet(Async)");
        }
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling measurementPastResultsGet(Async)");
        }
        

        okhttp3.Call localVarCall = measurementPastResultsGetCall(startTime, startDate, endTime, endDate, _callback);
        return localVarCall;

    }

    /**
     * 
     * The HUB is requesting the analyzer send past results between two times
     * @param startTime The time to start looking for results to return (required)
     * @param startDate The date to start looking for results to return (required)
     * @param endTime The time to stop looking for results to return (required)
     * @param endDate The date to stop looking for results to return (required)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer is responding with the results of all measurements taken between the times in the request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This response is sent to a request to a server endpoint that is not defined </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> This response is sent to any request sent to a valid location but with an method that is not supported </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> This response is sent to any request whose subsequent server response violates the predefined response schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2001 measurementPastResultsGet(String startTime, String startDate, String endTime, String endDate) throws ApiException {
        ApiResponse<InlineResponse2001> localVarResp = measurementPastResultsGetWithHttpInfo(startTime, startDate, endTime, endDate);
        return localVarResp.getData();
    }

    /**
     * 
     * The HUB is requesting the analyzer send past results between two times
     * @param startTime The time to start looking for results to return (required)
     * @param startDate The date to start looking for results to return (required)
     * @param endTime The time to stop looking for results to return (required)
     * @param endDate The date to stop looking for results to return (required)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer is responding with the results of all measurements taken between the times in the request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This response is sent to a request to a server endpoint that is not defined </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> This response is sent to any request sent to a valid location but with an method that is not supported </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> This response is sent to any request whose subsequent server response violates the predefined response schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2001> measurementPastResultsGetWithHttpInfo(String startTime, String startDate, String endTime, String endDate) throws ApiException {
        okhttp3.Call localVarCall = measurementPastResultsGetValidateBeforeCall(startTime, startDate, endTime, endDate, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The HUB is requesting the analyzer send past results between two times
     * @param startTime The time to start looking for results to return (required)
     * @param startDate The date to start looking for results to return (required)
     * @param endTime The time to stop looking for results to return (required)
     * @param endDate The date to stop looking for results to return (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer is responding with the results of all measurements taken between the times in the request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This response is sent to a request to a server endpoint that is not defined </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> This response is sent to any request sent to a valid location but with an method that is not supported </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> This response is sent to any request whose subsequent server response violates the predefined response schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call measurementPastResultsGetAsync(String startTime, String startDate, String endTime, String endDate, final ApiCallback<InlineResponse2001> _callback) throws ApiException {

        okhttp3.Call localVarCall = measurementPastResultsGetValidateBeforeCall(startTime, startDate, endTime, endDate, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for measurementResultGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The analyzer is sending the HUB the results of the most recent measurement performed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This response is sent to a request to a server endpoint that is not defined </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> This response is sent to any request sent to a valid location but with an method that is not supported </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> This response is sent to any request whose subsequent server response violates the predefined response schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call measurementResultGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/measurement/result";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call measurementResultGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = measurementResultGetCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * The HUB requests that the analyzer return the result of the most recent measurement performed
     * @return MeasurementResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The analyzer is sending the HUB the results of the most recent measurement performed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This response is sent to a request to a server endpoint that is not defined </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> This response is sent to any request sent to a valid location but with an method that is not supported </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> This response is sent to any request whose subsequent server response violates the predefined response schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public MeasurementResult measurementResultGet() throws ApiException {
        ApiResponse<MeasurementResult> localVarResp = measurementResultGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * The HUB requests that the analyzer return the result of the most recent measurement performed
     * @return ApiResponse&lt;MeasurementResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The analyzer is sending the HUB the results of the most recent measurement performed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This response is sent to a request to a server endpoint that is not defined </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> This response is sent to any request sent to a valid location but with an method that is not supported </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> This response is sent to any request whose subsequent server response violates the predefined response schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MeasurementResult> measurementResultGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = measurementResultGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<MeasurementResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The HUB requests that the analyzer return the result of the most recent measurement performed
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The analyzer is sending the HUB the results of the most recent measurement performed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This response is sent to a request to a server endpoint that is not defined </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> This response is sent to any request sent to a valid location but with an method that is not supported </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> This response is sent to any request whose subsequent server response violates the predefined response schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call measurementResultGetAsync(final ApiCallback<MeasurementResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = measurementResultGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<MeasurementResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for measurementScriptPost
     * @param inlineObject  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This response is sent to notify the HUB of the status of a measurement that was requested to start, cancel, or whose status is being queried </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This response is sent to a request to a server endpoint that is not defined </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> This response is sent to any request sent to a valid location but with an method that is not supported </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> This response is sent to any request whose subsequent server response violates the predefined response schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call measurementScriptPostCall(InlineObject inlineObject, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject;

        // create path and map variables
        String localVarPath = "/measurement/script";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call measurementScriptPostValidateBeforeCall(InlineObject inlineObject, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'inlineObject' is set
        if (inlineObject == null) {
            throw new ApiException("Missing the required parameter 'inlineObject' when calling measurementScriptPost(Async)");
        }
        

        okhttp3.Call localVarCall = measurementScriptPostCall(inlineObject, _callback);
        return localVarCall;

    }

    /**
     * 
     * Start an analyzer measurement script sent as a string.  This is intended for R&amp;D use only and should not be used during normal operation
     * @param inlineObject  (required)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This response is sent to notify the HUB of the status of a measurement that was requested to start, cancel, or whose status is being queried </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This response is sent to a request to a server endpoint that is not defined </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> This response is sent to any request sent to a valid location but with an method that is not supported </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> This response is sent to any request whose subsequent server response violates the predefined response schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200 measurementScriptPost(InlineObject inlineObject) throws ApiException {
        ApiResponse<InlineResponse200> localVarResp = measurementScriptPostWithHttpInfo(inlineObject);
        return localVarResp.getData();
    }

    /**
     * 
     * Start an analyzer measurement script sent as a string.  This is intended for R&amp;D use only and should not be used during normal operation
     * @param inlineObject  (required)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This response is sent to notify the HUB of the status of a measurement that was requested to start, cancel, or whose status is being queried </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This response is sent to a request to a server endpoint that is not defined </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> This response is sent to any request sent to a valid location but with an method that is not supported </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> This response is sent to any request whose subsequent server response violates the predefined response schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200> measurementScriptPostWithHttpInfo(InlineObject inlineObject) throws ApiException {
        okhttp3.Call localVarCall = measurementScriptPostValidateBeforeCall(inlineObject, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Start an analyzer measurement script sent as a string.  This is intended for R&amp;D use only and should not be used during normal operation
     * @param inlineObject  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This response is sent to notify the HUB of the status of a measurement that was requested to start, cancel, or whose status is being queried </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This response is sent to a request to a server endpoint that is not defined </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> This response is sent to any request sent to a valid location but with an method that is not supported </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> This response is sent to any request whose subsequent server response violates the predefined response schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call measurementScriptPostAsync(InlineObject inlineObject, final ApiCallback<InlineResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = measurementScriptPostValidateBeforeCall(inlineObject, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for measurementSupportedConsumablesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer is responding to the client with a detailed list of all supported consumables. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call measurementSupportedConsumablesGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/measurement/supported_consumables";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call measurementSupportedConsumablesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = measurementSupportedConsumablesGetCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Return a list of all consumable types the analyzer supports. Each consumable returned will include a universally unique identifier, which will be used by the IC when starting a measurement. Any information required to run a consumable will be described in the response using the JSON Schema format (https://json-schema.org/).
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer is responding to the client with a detailed list of all supported consumables. </td><td>  -  </td></tr>
     </table>
     */
    public Object measurementSupportedConsumablesGet() throws ApiException {
        ApiResponse<Object> localVarResp = measurementSupportedConsumablesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Return a list of all consumable types the analyzer supports. Each consumable returned will include a universally unique identifier, which will be used by the IC when starting a measurement. Any information required to run a consumable will be described in the response using the JSON Schema format (https://json-schema.org/).
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer is responding to the client with a detailed list of all supported consumables. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> measurementSupportedConsumablesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = measurementSupportedConsumablesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return a list of all consumable types the analyzer supports. Each consumable returned will include a universally unique identifier, which will be used by the IC when starting a measurement. Any information required to run a consumable will be described in the response using the JSON Schema format (https://json-schema.org/).
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer is responding to the client with a detailed list of all supported consumables. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call measurementSupportedConsumablesGetAsync(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = measurementSupportedConsumablesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
