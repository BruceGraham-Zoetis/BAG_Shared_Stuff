/*
 * Analyzer and HUB API
 * The definition of the software interface between analyzers and the HUB.  The interface will be implemented as a RESTful interface with all server endpoints hosted on the Analyzer.  The following requirements will be met by all interfaces:  1. All data passed back from server shall be in JSON format. 2. All query parameters and JSON data properties shall be named using snake case and be all lower case. 4. All data types that describe a measurement value shall end with an underscore followed by the unit of that physical value.  i.e. motor_current_ma.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.InlineResponse2002;
import org.openapitools.client.model.InlineResponse2003;
import org.openapitools.client.model.InlineResponse400;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StatusChannelApi {
    private ApiClient localVarApiClient;

    public StatusChannelApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StatusChannelApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for statusCurrentlyActivatedEventsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer is responding with a list of all currently activated events </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This response is sent to a request to a server endpoint that is not defined </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> This response is sent to any request sent to a valid location but with an method that is not supported </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> This response is sent to any request whose subsequent server response violates the predefined response schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statusCurrentlyActivatedEventsGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/status/currently_activated_events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call statusCurrentlyActivatedEventsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = statusCurrentlyActivatedEventsGetCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * The HUB is requesting the analyzer respond with a list of all currently activated events
     * @return InlineResponse2003
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer is responding with a list of all currently activated events </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This response is sent to a request to a server endpoint that is not defined </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> This response is sent to any request sent to a valid location but with an method that is not supported </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> This response is sent to any request whose subsequent server response violates the predefined response schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2003 statusCurrentlyActivatedEventsGet() throws ApiException {
        ApiResponse<InlineResponse2003> localVarResp = statusCurrentlyActivatedEventsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * The HUB is requesting the analyzer respond with a list of all currently activated events
     * @return ApiResponse&lt;InlineResponse2003&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer is responding with a list of all currently activated events </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This response is sent to a request to a server endpoint that is not defined </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> This response is sent to any request sent to a valid location but with an method that is not supported </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> This response is sent to any request whose subsequent server response violates the predefined response schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2003> statusCurrentlyActivatedEventsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = statusCurrentlyActivatedEventsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The HUB is requesting the analyzer respond with a list of all currently activated events
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer is responding with a list of all currently activated events </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This response is sent to a request to a server endpoint that is not defined </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> This response is sent to any request sent to a valid location but with an method that is not supported </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> This response is sent to any request whose subsequent server response violates the predefined response schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statusCurrentlyActivatedEventsGetAsync(final ApiCallback<InlineResponse2003> _callback) throws ApiException {

        okhttp3.Call localVarCall = statusCurrentlyActivatedEventsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for statusOperationalGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer is responding with its status </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This response is sent to a request to a server endpoint that is not defined </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> This response is sent to any request sent to a valid location but with an method that is not supported </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> This response is sent to any request whose subsequent server response violates the predefined response schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statusOperationalGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/status/operational";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call statusOperationalGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = statusOperationalGetCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * The HUB can use send this message to get the status of an analyzer
     * @return InlineResponse2002
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer is responding with its status </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This response is sent to a request to a server endpoint that is not defined </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> This response is sent to any request sent to a valid location but with an method that is not supported </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> This response is sent to any request whose subsequent server response violates the predefined response schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2002 statusOperationalGet() throws ApiException {
        ApiResponse<InlineResponse2002> localVarResp = statusOperationalGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * The HUB can use send this message to get the status of an analyzer
     * @return ApiResponse&lt;InlineResponse2002&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer is responding with its status </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This response is sent to a request to a server endpoint that is not defined </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> This response is sent to any request sent to a valid location but with an method that is not supported </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> This response is sent to any request whose subsequent server response violates the predefined response schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2002> statusOperationalGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = statusOperationalGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The HUB can use send this message to get the status of an analyzer
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analyzer is responding with its status </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This response is sent to a request that violates the predefined request schema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This response is sent to a request to a server endpoint that is not defined </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> This response is sent to any request sent to a valid location but with an method that is not supported </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> This response is sent to any request whose subsequent server response violates the predefined response schema </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> This response is sent to any request that the analyzer is unable to do at the time </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statusOperationalGetAsync(final ApiCallback<InlineResponse2002> _callback) throws ApiException {

        okhttp3.Call localVarCall = statusOperationalGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
