# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class InlineObject4(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, correlation_id=None, qr_contents=None):  # noqa: E501
        """InlineObject4 - a model defined in OpenAPI

        :param correlation_id: The correlation_id of this InlineObject4.  # noqa: E501
        :type correlation_id: str
        :param qr_contents: The qr_contents of this InlineObject4.  # noqa: E501
        :type qr_contents: str
        """
        self.openapi_types = {
            'correlation_id': str,
            'qr_contents': str
        }

        self.attribute_map = {
            'correlation_id': 'correlation_id',
            'qr_contents': 'qr_contents'
        }

        self._correlation_id = correlation_id
        self._qr_contents = qr_contents

    @classmethod
    def from_dict(cls, dikt) -> 'InlineObject4':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_object_4 of this InlineObject4.  # noqa: E501
        :rtype: InlineObject4
        """
        return util.deserialize_model(dikt, cls)

    @property
    def correlation_id(self):
        """Gets the correlation_id of this InlineObject4.

        A unique ID that can be used to correlate messages being sent and received  # noqa: E501

        :return: The correlation_id of this InlineObject4.
        :rtype: str
        """
        return self._correlation_id

    @correlation_id.setter
    def correlation_id(self, correlation_id):
        """Sets the correlation_id of this InlineObject4.

        A unique ID that can be used to correlate messages being sent and received  # noqa: E501

        :param correlation_id: The correlation_id of this InlineObject4.
        :type correlation_id: str
        """
        if correlation_id is None:
            raise ValueError("Invalid value for `correlation_id`, must not be `None`")  # noqa: E501

        self._correlation_id = correlation_id

    @property
    def qr_contents(self):
        """Gets the qr_contents of this InlineObject4.

        The contents of the QR that was scanned.  If scanning failed or was cancelled by operator, this will be an empty string  # noqa: E501

        :return: The qr_contents of this InlineObject4.
        :rtype: str
        """
        return self._qr_contents

    @qr_contents.setter
    def qr_contents(self, qr_contents):
        """Sets the qr_contents of this InlineObject4.

        The contents of the QR that was scanned.  If scanning failed or was cancelled by operator, this will be an empty string  # noqa: E501

        :param qr_contents: The qr_contents of this InlineObject4.
        :type qr_contents: str
        """
        if qr_contents is None:
            raise ValueError("Invalid value for `qr_contents`, must not be `None`")  # noqa: E501

        self._qr_contents = qr_contents
