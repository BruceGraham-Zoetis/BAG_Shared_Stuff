# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class InlineObject2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, correlation_id=None, option_chosen=None):  # noqa: E501
        """InlineObject2 - a model defined in OpenAPI

        :param correlation_id: The correlation_id of this InlineObject2.  # noqa: E501
        :type correlation_id: str
        :param option_chosen: The option_chosen of this InlineObject2.  # noqa: E501
        :type option_chosen: str
        """
        self.openapi_types = {
            'correlation_id': str,
            'option_chosen': str
        }

        self.attribute_map = {
            'correlation_id': 'correlation_id',
            'option_chosen': 'option_chosen'
        }

        self._correlation_id = correlation_id
        self._option_chosen = option_chosen

    @classmethod
    def from_dict(cls, dikt) -> 'InlineObject2':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_object_2 of this InlineObject2.  # noqa: E501
        :rtype: InlineObject2
        """
        return util.deserialize_model(dikt, cls)

    @property
    def correlation_id(self):
        """Gets the correlation_id of this InlineObject2.

        A unique ID that can be used to correlate messages being sent and received  # noqa: E501

        :return: The correlation_id of this InlineObject2.
        :rtype: str
        """
        return self._correlation_id

    @correlation_id.setter
    def correlation_id(self, correlation_id):
        """Sets the correlation_id of this InlineObject2.

        A unique ID that can be used to correlate messages being sent and received  # noqa: E501

        :param correlation_id: The correlation_id of this InlineObject2.
        :type correlation_id: str
        """
        if correlation_id is None:
            raise ValueError("Invalid value for `correlation_id`, must not be `None`")  # noqa: E501

        self._correlation_id = correlation_id

    @property
    def option_chosen(self):
        """Gets the option_chosen of this InlineObject2.

        The option chosen by the operator  # noqa: E501

        :return: The option_chosen of this InlineObject2.
        :rtype: str
        """
        return self._option_chosen

    @option_chosen.setter
    def option_chosen(self, option_chosen):
        """Sets the option_chosen of this InlineObject2.

        The option chosen by the operator  # noqa: E501

        :param option_chosen: The option_chosen of this InlineObject2.
        :type option_chosen: str
        """
        if option_chosen is None:
            raise ValueError("Invalid value for `option_chosen`, must not be `None`")  # noqa: E501

        self._option_chosen = option_chosen
