# coding: utf-8

"""
    Analyzer and HUB API

    The definition of the software interface between analyzers and the HUB.  The interface will be implemented as a RESTful interface with all server endpoints hosted on the Analyzer.  The following requirements will be met by all interfaces:  1. All data passed back from server shall be in JSON format. 2. All query parameters and JSON data properties shall be named using snake case and be all lower case. 4. All data types that describe a measurement value shall end with an underscore followed by the unit of that physical value.  i.e. motor_current_ma.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest

import openapi_client
from openapi_client.api.measurement_channel_api import MeasurementChannelApi  # noqa: E501
from openapi_client.rest import ApiException


class TestMeasurementChannelApi(unittest.TestCase):
    """MeasurementChannelApi unit test stubs"""

    def setUp(self):
        self.api = openapi_client.api.measurement_channel_api.MeasurementChannelApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_measurement_cancel_post(self):
        """Test case for measurement_cancel_post

        """
        pass

    def test_measurement_consumable_consumable_uuid_post(self):
        """Test case for measurement_consumable_consumable_uuid_post

        """
        pass

    def test_measurement_file_post(self):
        """Test case for measurement_file_post

        """
        pass

    def test_measurement_results_get(self):
        """Test case for measurement_results_get

        """
        pass

    def test_measurement_results_latest_get(self):
        """Test case for measurement_results_latest_get

        """
        pass

    def test_measurement_script_post(self):
        """Test case for measurement_script_post

        """
        pass

    def test_measurement_supported_consumables_get(self):
        """Test case for measurement_supported_consumables_get

        """
        pass


if __name__ == '__main__':
    unittest.main()
