# coding: utf-8

"""
    Analyzer and HUB API

    The definition of the software interface between analyzers and the HUB.  The interface will be implemented as a RESTful interface with all server endpoints hosted on the Analyzer.  The following requirements will be met by all interfaces:  1. All data passed back from server shall be in JSON format. 2. All query parameters and JSON data properties shall be named using snake case and be all lower case. 4. All data types that describe a measurement value shall end with an underscore followed by the unit of that physical value.  i.e. motor_current_ma.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class InlineResponse400(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'detail': 'str',
        'status': 'float',
        'title': 'str',
        'type': 'str'
    }

    attribute_map = {
        'detail': 'detail',
        'status': 'status',
        'title': 'title',
        'type': 'type'
    }

    def __init__(self, detail=None, status=None, title=None, type=None, local_vars_configuration=None):  # noqa: E501
        """InlineResponse400 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._detail = None
        self._status = None
        self._title = None
        self._type = None
        self.discriminator = None

        self.detail = detail
        self.status = status
        self.title = title
        self.type = type

    @property
    def detail(self):
        """Gets the detail of this InlineResponse400.  # noqa: E501

        A description of the problem with the request  # noqa: E501

        :return: The detail of this InlineResponse400.  # noqa: E501
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this InlineResponse400.

        A description of the problem with the request  # noqa: E501

        :param detail: The detail of this InlineResponse400.  # noqa: E501
        :type detail: str
        """
        if self.local_vars_configuration.client_side_validation and detail is None:  # noqa: E501
            raise ValueError("Invalid value for `detail`, must not be `None`")  # noqa: E501

        self._detail = detail

    @property
    def status(self):
        """Gets the status of this InlineResponse400.  # noqa: E501

        The number of the HTTP error code  # noqa: E501

        :return: The status of this InlineResponse400.  # noqa: E501
        :rtype: float
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse400.

        The number of the HTTP error code  # noqa: E501

        :param status: The status of this InlineResponse400.  # noqa: E501
        :type status: float
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def title(self):
        """Gets the title of this InlineResponse400.  # noqa: E501

        The title of the error indicated by the status  # noqa: E501

        :return: The title of this InlineResponse400.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this InlineResponse400.

        The title of the error indicated by the status  # noqa: E501

        :param title: The title of this InlineResponse400.  # noqa: E501
        :type title: str
        """
        if self.local_vars_configuration.client_side_validation and title is None:  # noqa: E501
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def type(self):
        """Gets the type of this InlineResponse400.  # noqa: E501

        Additional error information if available describing the type of error  # noqa: E501

        :return: The type of this InlineResponse400.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse400.

        Additional error information if available describing the type of error  # noqa: E501

        :param type: The type of this InlineResponse400.  # noqa: E501
        :type type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse400):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse400):
            return True

        return self.to_dict() != other.to_dict()
