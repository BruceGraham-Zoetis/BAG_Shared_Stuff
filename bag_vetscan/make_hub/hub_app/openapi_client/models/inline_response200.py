# coding: utf-8

"""
    Analyzer and HUB API

    The definition of the software interface between analyzers and the HUB.  The interface will be implemented as a RESTful interface with all server endpoints hosted on the Analyzer.  The following requirements will be met by all interfaces:  1. All data passed back from server shall be in JSON format. 2. All query parameters and JSON data properties shall be named using snake case and be all lower case. 4. All data types that describe a measurement value shall end with an underscore followed by the unit of that physical value.  i.e. motor_current_ma.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class InlineResponse200(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'measurement_id': 'str',
        'elapsed_time_msec': 'float',
        'measurement_status': 'MeasurementStatus',
        'status_detail': 'str'
    }

    attribute_map = {
        'measurement_id': 'measurement_id',
        'elapsed_time_msec': 'elapsed_time_msec',
        'measurement_status': 'measurement_status',
        'status_detail': 'status_detail'
    }

    def __init__(self, measurement_id=None, elapsed_time_msec=None, measurement_status=None, status_detail=None, local_vars_configuration=None):  # noqa: E501
        """InlineResponse200 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._measurement_id = None
        self._elapsed_time_msec = None
        self._measurement_status = None
        self._status_detail = None
        self.discriminator = None

        self.measurement_id = measurement_id
        self.elapsed_time_msec = elapsed_time_msec
        self.measurement_status = measurement_status
        self.status_detail = status_detail

    @property
    def measurement_id(self):
        """Gets the measurement_id of this InlineResponse200.  # noqa: E501

        The ID value for a measurement  # noqa: E501

        :return: The measurement_id of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._measurement_id

    @measurement_id.setter
    def measurement_id(self, measurement_id):
        """Sets the measurement_id of this InlineResponse200.

        The ID value for a measurement  # noqa: E501

        :param measurement_id: The measurement_id of this InlineResponse200.  # noqa: E501
        :type measurement_id: str
        """
        if self.local_vars_configuration.client_side_validation and measurement_id is None:  # noqa: E501
            raise ValueError("Invalid value for `measurement_id`, must not be `None`")  # noqa: E501

        self._measurement_id = measurement_id

    @property
    def elapsed_time_msec(self):
        """Gets the elapsed_time_msec of this InlineResponse200.  # noqa: E501

        The time the operation has taken so far  # noqa: E501

        :return: The elapsed_time_msec of this InlineResponse200.  # noqa: E501
        :rtype: float
        """
        return self._elapsed_time_msec

    @elapsed_time_msec.setter
    def elapsed_time_msec(self, elapsed_time_msec):
        """Sets the elapsed_time_msec of this InlineResponse200.

        The time the operation has taken so far  # noqa: E501

        :param elapsed_time_msec: The elapsed_time_msec of this InlineResponse200.  # noqa: E501
        :type elapsed_time_msec: float
        """
        if self.local_vars_configuration.client_side_validation and elapsed_time_msec is None:  # noqa: E501
            raise ValueError("Invalid value for `elapsed_time_msec`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                elapsed_time_msec is not None and elapsed_time_msec < 0):  # noqa: E501
            raise ValueError("Invalid value for `elapsed_time_msec`, must be a value greater than or equal to `0`")  # noqa: E501

        self._elapsed_time_msec = elapsed_time_msec

    @property
    def measurement_status(self):
        """Gets the measurement_status of this InlineResponse200.  # noqa: E501


        :return: The measurement_status of this InlineResponse200.  # noqa: E501
        :rtype: MeasurementStatus
        """
        return self._measurement_status

    @measurement_status.setter
    def measurement_status(self, measurement_status):
        """Sets the measurement_status of this InlineResponse200.


        :param measurement_status: The measurement_status of this InlineResponse200.  # noqa: E501
        :type measurement_status: MeasurementStatus
        """
        if self.local_vars_configuration.client_side_validation and measurement_status is None:  # noqa: E501
            raise ValueError("Invalid value for `measurement_status`, must not be `None`")  # noqa: E501

        self._measurement_status = measurement_status

    @property
    def status_detail(self):
        """Gets the status_detail of this InlineResponse200.  # noqa: E501

        Additional information in plain text that describes the value status of the analyzer.  If no additional detail is available or necessary, this will be an empty string  # noqa: E501

        :return: The status_detail of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._status_detail

    @status_detail.setter
    def status_detail(self, status_detail):
        """Sets the status_detail of this InlineResponse200.

        Additional information in plain text that describes the value status of the analyzer.  If no additional detail is available or necessary, this will be an empty string  # noqa: E501

        :param status_detail: The status_detail of this InlineResponse200.  # noqa: E501
        :type status_detail: str
        """
        if self.local_vars_configuration.client_side_validation and status_detail is None:  # noqa: E501
            raise ValueError("Invalid value for `status_detail`, must not be `None`")  # noqa: E501

        self._status_detail = status_detail

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse200):
            return True

        return self.to_dict() != other.to_dict()
