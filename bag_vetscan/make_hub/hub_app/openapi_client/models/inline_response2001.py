# coding: utf-8

"""
    Analyzer and HUB API

    The definition of the software interface between analyzers and the HUB.  The interface will be implemented as a RESTful interface with all server endpoints hosted on the Analyzer.  The following requirements will be met by all interfaces:  1. All data passed back from server shall be in JSON format. 2. All query parameters and JSON data properties shall be named using snake case and be all lower case. 4. All data types that describe a measurement value shall end with an underscore followed by the unit of that physical value.  i.e. motor_current_ma.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class InlineResponse2001(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'measurement_results': 'list[MeasurementResult]'
    }

    attribute_map = {
        'measurement_results': 'measurement_results'
    }

    def __init__(self, measurement_results=None, local_vars_configuration=None):  # noqa: E501
        """InlineResponse2001 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._measurement_results = None
        self.discriminator = None

        self.measurement_results = measurement_results

    @property
    def measurement_results(self):
        """Gets the measurement_results of this InlineResponse2001.  # noqa: E501

        An array of measurement result objects that were taken in between the times sent in the request.  If there are no historical results to report, this will return as an empty array  # noqa: E501

        :return: The measurement_results of this InlineResponse2001.  # noqa: E501
        :rtype: list[MeasurementResult]
        """
        return self._measurement_results

    @measurement_results.setter
    def measurement_results(self, measurement_results):
        """Sets the measurement_results of this InlineResponse2001.

        An array of measurement result objects that were taken in between the times sent in the request.  If there are no historical results to report, this will return as an empty array  # noqa: E501

        :param measurement_results: The measurement_results of this InlineResponse2001.  # noqa: E501
        :type measurement_results: list[MeasurementResult]
        """
        if self.local_vars_configuration.client_side_validation and measurement_results is None:  # noqa: E501
            raise ValueError("Invalid value for `measurement_results`, must not be `None`")  # noqa: E501

        self._measurement_results = measurement_results

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2001):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse2001):
            return True

        return self.to_dict() != other.to_dict()
